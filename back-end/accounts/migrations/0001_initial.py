# Generated by Django 4.1 on 2023-02-02 12:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='Meno')),
                ('last_name', models.CharField(max_length=150, verbose_name='Priezvisko')),
                ('pronoun', models.CharField(choices=[('male', 'Mužský rod'), ('female', 'Ženský rod')], max_length=16, verbose_name='Oslovovanie')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(default='+421', help_text='Môže byť použité počas doručovania', max_length=20, verbose_name='Telefónne číslo')),
                ('newsletter', models.BooleanField(default=True)),
                ('terms_conditions', models.BooleanField()),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('_is_email_valid', models.BooleanField(default=False, help_text='Designates whether this user has confirmed email. ')),
                ('_is_payment_valid', models.BooleanField(default=False, help_text='Designates whether this user has a valid payment option. ')),
                ('_is_subscribed', models.BooleanField(default=False, help_text='Designates whether this user is subscribed, has automatic payments turned on. ')),
                ('default_num_portions', models.IntegerField(choices=[(2, 2), (4, 4), (6, 6)], default=4, help_text='Koľko vás bude pravidelne jedávať?', verbose_name='Počet porcií')),
                ('default_pickup', models.BooleanField(default=False, help_text='Zaškrtnite, ak si želáte objednávky vyzdvihovať osobne u nás v kamennej predajni.', verbose_name='Osobné vyzdvihovanie')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Domov', max_length=32, verbose_name='Názov adresy')),
                ('address', models.CharField(help_text='Nezabudnite pridať číslo domu', max_length=128, verbose_name='Adresa a číslo domu')),
                ('note', models.TextField(blank=True, help_text='(zvonček, poschodie, ...)', max_length=256, verbose_name='Poznámka pre kuriéra')),
                ('city', models.CharField(max_length=100, verbose_name='Mesto')),
                ('district', models.CharField(blank=True, max_length=50, verbose_name='Okres')),
                ('postal', models.CharField(max_length=6, verbose_name='PSČ')),
                ('country', models.CharField(blank=True, max_length=32, verbose_name='Krajina')),
                ('coordinates', models.CharField(max_length=64)),
                ('primary', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('_is_payment_valid', True), ('_is_subscribed', True)), ('_is_subscribed', False), _connector='OR'), name='Payment is required for subscription'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('_is_email_valid', True), ('_is_payment_valid', True)), ('_is_payment_valid', False), _connector='OR'), name='Email confirmation is required for adding payment method'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('_is_subscribed', True), ('is_active', True)), ('_is_subscribed', False), _connector='OR'), name='Being active is required for subscription'),
        ),
    ]
